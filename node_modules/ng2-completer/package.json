{
  "_from": "ng2-completer@^2.0.8",
  "_id": "ng2-completer@2.0.8",
  "_inBundle": false,
  "_integrity": "sha512-WzxJ4u3vAHsfBUaFCloEBoirPZrnDabtWEKyDok7dtjhS1ZvcbwQ4asdXuDO0hZ0T1QC66U/PwLhKfkG501hVg==",
  "_location": "/ng2-completer",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "ng2-completer",
    "fetchSpec": "^2.0.8",
    "name": "ng2-completer",
    "raw": "ng2-completer@^2.0.8",
    "rawSpec": "^2.0.8",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/ng2-completer/-/ng2-completer-2.0.8.tgz",
  "_shasum": "36101eb5a796f966897e7894fc437effd88ebdfb",
  "_shrinkwrap": null,
  "_spec": "ng2-completer@^2.0.8",
  "_where": "C:\\FrontEnd_New",
  "author": {
    "email": "oferhe@gmail.com",
    "name": "Ofer Herman"
  },
  "bugs": {
    "url": "https://github.com/oferh/ng2-completer/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Andrew Rumm",
      "email": "rayz@rayz.ru"
    }
  ],
  "dependencies": {},
  "deprecated": false,
  "description": "ng2 autocomplete/typeahead component",
  "devDependencies": {
    "@angular/animations": "5.0.0",
    "@angular/cdk": "5.0.0-rc.2",
    "@angular/common": "5.0.0",
    "@angular/compiler": "5.0.0",
    "@angular/compiler-cli": "5.0.0",
    "@angular/core": "5.0.0",
    "@angular/forms": "5.0.0",
    "@angular/material": "5.0.0-rc.2",
    "@angular/platform-browser": "5.0.0",
    "@angular/platform-browser-dynamic": "5.0.0",
    "@angular/platform-server": "5.0.0",
    "@angular/router": "5.0.0",
    "@compodoc/compodoc": "1.0.3",
    "@types/jasmine": "2.6.2",
    "@types/node": "8.0.47",
    "angular2-template-loader": "^0.6.2",
    "awesome-typescript-loader": "^3.4.1",
    "chalk": "2.3.0",
    "codelyzer": "4.0.0",
    "copy-webpack-plugin": "^4.2.3",
    "core-js": "2.5.1",
    "cross-env": "^5.1.1",
    "extract-text-webpack-plugin": "^3.0.2",
    "gh-pages": "^1.1.0",
    "html-loader": "^0.5.1",
    "html-webpack-plugin": "^2.30.1",
    "istanbul-instrumenter-loader": "3.0.0",
    "jasmine-core": "2.8.0",
    "karma": "1.7.1",
    "karma-chrome-launcher": "2.2.0",
    "karma-coverage-istanbul-reporter": "1.3.0",
    "karma-jasmine": "1.1.0",
    "karma-sourcemap-loader": "0.3.7",
    "karma-spec-reporter": "0.0.31",
    "karma-webpack": "2.0.5",
    "ng2-bootstrap": "^1.6.3",
    "raw-loader": "^0.5.1",
    "reflect-metadata": "0.1.10",
    "rollup": "0.50.0",
    "rollup-plugin-license": "0.5.0",
    "rollup-plugin-node-resolve": "3.0.0",
    "rollup-plugin-sourcemaps": "0.4.2",
    "rollup-plugin-visualizer": "^0.3.1",
    "rxjs": "5.5.2",
    "shelljs": "0.7.8",
    "source-map-loader": "0.2.3",
    "ts-loader": "3.1.1",
    "tslint": "5.8.0",
    "typescript": "2.4.2",
    "uglify-js": "3.1.6",
    "webpack": "^3.8.1",
    "webpack-dev-server": "^2.9.4",
    "webpack-merge": "^4.1.0",
    "zone.js": "0.8.18"
  },
  "es2015": "./esm2015/ng2-completer.js",
  "homepage": "http://oferh.github.io/ng2-completer/",
  "keywords": [
    "angular2",
    "autcomplete",
    "ng2",
    "typeahead",
    "word completion"
  ],
  "license": "MIT",
  "main": "./bundles/ng2-completer.umd.js",
  "module": "./esm5/ng2-completer.js",
  "name": "ng2-completer",
  "optionalDependencies": {},
  "peerDependencies": {
    "@angular/common": ">= 5.0.0",
    "@angular/core": ">= 5.0.0",
    "@angular/forms": ">= 5.0.0"
  },
  "readme": "# ng2-completer\n\nAuto complete component for Angular 2.\n\nThis component is based on [angucomplete-alt](https://github.com/ghiden/angucomplete-alt)\n\nClick for [demo](http://oferh.github.io/ng2-completer/) or [plunk](https://plnkr.co/edit/sVnfpBiEb5jBdtul4ls9?p=preview)\n\n## Installation\n\n```sh\nnpm install ng2-completer --save\n```\n\n## Usage\n\nThe module you want to use ng2-completer in must import `Ng2CompleterModule` and `FormsModule` (to use the ngModel\ndirective on ng2-completer).  `Ng2CompleterModule` provides the `CompleterService`, and declares the `ng2-completer`\ndirective.\n```ts\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from \"@angular/forms\";\nimport { AppComponent } from './app.component';\nimport { Ng2CompleterModule } from \"ng2-completer\";\n\n@NgModule({\n  imports: [\n      BrowserModule,\n      Ng2CompleterModule,\n      FormsModule,\n  ],\n  declarations: [ AppComponent ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n```\n\nAdd ng2-completer to your component and create a data source:\n\n```ts\nimport { Component } from '@angular/core';\nimport { CompleterService, CompleterData } from 'ng2-completer';\n\n@Component({\n  selector: 'my-component',\n  template: `<h1>Search color</h1>\n            <ng2-completer [(ngModel)]=\"searchStr\" [datasource]=\"dataService\" [minSearchLength]=\"0\"></ng2-completer>\n            <h1>Search captain</h1>\n            <ng2-completer [(ngModel)]=\"captain\" [datasource]=\"captains\" [minSearchLength]=\"0\"></ng2-completer>`\n})\nexport class MyComponent {\n\n  protected searchStr: string;\n  protected captain: string;\n  protected dataService: CompleterData;\n  protected searchData = [\n    { color: 'red', value: '#f00' },\n    { color: 'green', value: '#0f0' },\n    { color: 'blue', value: '#00f' },\n    { color: 'cyan', value: '#0ff' },\n    { color: 'magenta', value: '#f0f' },\n    { color: 'yellow', value: '#ff0' },\n    { color: 'black', value: '#000' }\n  ];\n  protected captains = ['James T. Kirk', 'Benjamin Sisko', 'Jean-Luc Picard', 'Spock', 'Jonathan Archer', 'Hikaru Sulu', 'Christopher Pike', 'Rachel Garrett' ];\n\n  constructor(private completerService: CompleterService) {\n    this.dataService = completerService.local(this.searchData, 'color', 'color');\n  }\n}\n```\n\nng2-completer uses [rxjs](https://github.com/Reactive-Extensions/RxJS) stream as data sources.\nThere are 2 ready made data sources that can be used to fetch local and remote data but it's also possible to provide\na custom source that generates a stream of items.\n\n### System.js configuration\n\nAdd the following to `System.js` map configuration:\n```ts\n   var map = {\n       ...\n       'ng2-completer': 'node_modules/ng2-completer/ng2-completer.umd.js'\n   }\n```\n\n\n\n## API\n\n### ng2-completer component\n\n|Attribute|Description|Type|Required|Default|\n|:---    |:---        |:--- |:---      |:--- |\n|datasource|Autocomplete list data source can be an array of strings or a URL that results in an array of strings or a CompleterData object|Array\\<string\\>\\|string\\|CompleterData|Yes||\n|dataService|**Deprecated**  use `datasource` instead. Autocomplete list data source.|CompleterData|Yes||\n|ngModel| see the angular [forms API](https://angular.io/docs/js/latest/guide/forms.html).|string|Yes||\n|autoMatch|Auto select an item if it is the only result and it is an exact match of the search text.|boolean|No|false\n|autofocus|Set input focus when the page loads|boolean|No|false\n|clearUnselected|Clear the input on blur if not selected.|boolean|No|false|\n|clearSelected|Clear the input when a result is selected.|boolean|No|false|\n|disableInput|If true disable the input field.|boolean|No|false|\n|fieldTabindex|Set the `tabIndex` of the input.|number|No||\n|initialValue|Initial value for the component. Value is parsed using: titleField, descriptionField and imageField and used as selected value|any|No||\n|inputId|`id` attribute of the input element.|string|No||\n|inputName|`name` attribute of the input element.|string|No||\n|inputClass| `class` attribute of the input element.|string|No||\n|matchClass|CSS class to apply for matching part of the title and description.|string|No||\n|maxChars|Maximal number of characters that the user can type in the component.|number|No|524288|\n|minSearchLength|Minimal number of characters required for searching.|number|No|3|\n|overrideSuggested|If true will override suggested and set the model with the value in the input field.|boolean|No|false|\n|openOnFocus|If true will open the dropdown and perform search when the input gets the focus.|boolean|No|false|\n|openOnClick|If true will open and close the dropdown by click.|boolean|No|false|\n|selectOnFocus|If true will select the input text upon focus.|boolean|No|false|\n|selectOnClick|If true will select the input text by click.|boolean|No|false|\n|fillHighlighted|If true will set the model with the value in the input field when item is highlighted.|boolean|No|true|\n|pause|Number of msec. to wait before searching.|number|No|250|\n|placeholder|Placeholder text for the search field.|string|No||\n|textNoResults|Text displayed when the search returned no results. if the string is falsy it won't be displayed|string|No|\n|textSearching|Text displayed while search is active. if the string is falsy it won't be displayed|string|No|Searching...|\n|autoHighlight|Automatically highlight the best matching search result when the input changes. the \"best match\" is selected by: exact match, starts with and finally includes|boolean|No|false|\n\n### ng2-completer events\n\n|Name|Description|Type|\n|:---    |:---        |:--- |\n|selected|emitted when an item is selected.|(selected: CompleterItem): void|\n|highlighted|emitted when an item is highlighted.|(highlighted: CompleterItem): void|\n|focus|emitted when the input gets focus|(): void|\n|blur|emitted when the input looses focus|(): void|\n|opened|emitted when the dropdown is opened or closed|(isOpen: boolean): void|\n|keyup|emitted when the input emits keyup|(event: any): void|\n|keydown|emitted when the input emits keydown|(event: any): void|\n\n### ng2-completer methods\n\n|Method|Description|Parameters|\n|:---    |:---        |:--- |\n|open()|Open the dropdown| |\n|close()|Close the dropdown| |\n|focus()|Set the focus to the completer input| |\n|blur()|Remove the focus from the completer input| |\n|isOpen()|Returns the state of the dropdown| |\n\n### Local data\n\nCreate local data provider by calling `CompleterService.local`.\n\n#### Parameters\n\n|Name|Type|Description|Required|\n|:---|:---|:---       |:---    |\n|data|any[] \\| Observable<any[]>|A JSON array with the data to use or an Observable that emits one|Yes|\n|searchFields|string|Comma separated list of fields to search on. Fields may contain dots for nested attributes; if empty or null all data will be returned.|Yes|\n|titleField|string|Name of the field to use as title for the list item.|Yes|\n\n#### Attributes\n|Name|Type|Description|\n|:---|:---|:---       |\n|descriptionField|string|Name of the field to use as description for the list item.|\n|imageField|string|Name of the field to use as image url for the list item.|\n\n### Remote data\n\nCreate remote data provider by calling `CompleterService.remote`.\n\n#### Parameters\n\n|Name|Type|Description|Required|\n|:---|:---|:---       |:---    |\n|url|string|Base url for the search|Yes|\n|searchFields|string|Comma separated list of fields to search on. Fields may contain dots for nested attributes; if empty or null all data will be returned.|Yes|\n|titleField|string|Name of the field to use as title for the list item.|Yes|\n\n#### Attributes\n\n|Name|Type|Description|\n|:---|:---|:---       |\n|descriptionField|string|Name of the field to use as description for the list item.|\n|imageField|string|Name of the field to use as image url for the list item.|\n|urlFormater|(term: string) => string|Function that get's the searchterm and returns the search url before each search.|\n|dataField|string|The field in the response that includes the data.|\n|requestOptions|RequestOptions (@angular/common/http)|HTTP request options that should be sent with the search request.|\n\n### CSS classes\n\n* `.completer-holder`\n* `.completer-input`\n* `.completer-dropdown-holder`\n* `.completer-dropdown`\n* `.completer-searching`\n* `.completer-no-results`\n* `.completer-row`\n* `.completer-image-holder`\n* `.completer-image`\n* `.completer-image-default`\n* `.completer-title`\n* `.completer-description`\n* `.completer-list-item-holder`\n* `.completer-list-item`\n* `.completer-selected-row`\n\n## Credits\n\n* This product uses the TMDb API but is not endorsed or certified by TMDb\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/oferh/ng2-completer.git"
  },
  "scripts": {
    "build": "node build.js",
    "build:demo:dev": "cross-env webpack --progress --color",
    "build:demo:prod": "cross-env NODE_ENV=production webpack --config config/webpack.prod.js --progress --color",
    "compodoc": "compodoc -p tsconfig.json",
    "compodoc-serve": "compodoc -s",
    "deploy:gh-pages": "npm run build:demo:prod && cross-env ./node_modules/.bin/gh-pages -d dist/demo",
    "pack-lib": "npm pack ./dist/lib",
    "publish-lib": "npm publish ./dist/lib",
    "publish-lib:next": "npm publish --tag next ./dist/lib",
    "start": "cross-env webpack-dev-server --inline --progress --port 8080",
    "test": "karma start"
  },
  "typings": "./ng2-completer.d.ts",
  "version": "2.0.8"
}
